package com.gb.dbsync.client.model.txc;

import java.sql.SQLException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.core.JdbcTemplate;

import com.alibaba.druid.sql.SQLUtils;
import com.alibaba.druid.sql.ast.SQLExpr;
import com.alibaba.druid.sql.ast.SQLName;
import com.alibaba.druid.sql.ast.SQLStatement;
import com.alibaba.druid.sql.ast.expr.SQLAllColumnExpr;
import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
import com.alibaba.druid.sql.ast.expr.SQLBinaryOperator;
import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
import com.alibaba.druid.sql.ast.statement.SQLInsertStatement.ValuesClause;
import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
import com.alibaba.druid.sql.builder.impl.SQLDeleteBuilderImpl;
import com.alibaba.druid.sql.builder.impl.SQLSelectBuilderImpl;
import com.alibaba.druid.sql.builder.impl.SQLUpdateBuilderImpl;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlInsertStatement;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
import com.alibaba.druid.util.JdbcUtils;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Timer;
import com.gb.dbsync.client.exception.TxcNotSupportException;
import com.gb.dbsync.client.exception.TxcSqlParseException;
import com.gb.dbsync.client.model.SQLType;
import com.gb.dbsync.client.model.TableSchema;
import com.gb.dbsync.client.service.TableSchemaCacheLoader;
import com.gb.dbsync.client.service.TxcCustomSettingService;
import com.gb.dbsync.client.sqlast.MySQLRewriteVistorAop;
import com.gb.dbsync.client.sqlast.SQLASTVisitorAspectAdapter;
import com.gb.dbsync.client.sqlast.SqlInsertStatementBuilderImpl;
import com.gb.dbsync.client.utils.ContextUtils;
import com.gb.dbsync.client.utils.LRUCache;
import com.gb.dbsync.client.utils.MetricsReporter;
import com.googlecode.aviator.AviatorEvaluator;
import com.mysql.jdbc.Field;

public class TxcSqlParserProcessor_delete {
	
	private static final Logger logger = LoggerFactory.getLogger(TxcSqlParserProcessor_delete.class);
	
	private static final Timer parserProcessorTimer = MetricsReporter.timer(MetricRegistry.name(TxcSqlParserProcessor_delete.class, "parse"));
	
	SQLStatement statement;
	SQLUpdateBuilderImpl updateBuilder;
	SQLSelectBuilderImpl queryBuilder;
	SQLDeleteBuilderImpl deleteBuilder;
	SqlInsertStatementBuilderImpl insertStatementBuilder;
	SQLParamExtractorPipeline pipeline;
	String tableName;
	
	JdbcTemplate jdbcTemplate;
	
	public SQLParamExtractorPipeline getRenderPipeline() {
		return pipeline;
	}
	
	public TxcSqlParserProcessor_delete(JdbcTemplate jdbcTemplate, SQLStatement statement){
		this.jdbcTemplate = jdbcTemplate;
		this.statement = statement;
	}
	
	public TxcSqlTransformResult parse() {
		Timer.Context context = parserProcessorTimer.time();
		try {
			TxcSqlTransformResult result = new TxcSqlTransformResult();
			queryBuilder = new SQLSelectBuilderImpl(JdbcUtils.MYSQL);
			if (statement instanceof MySqlUpdateStatement) {// update
				updateBuilder = new SQLUpdateBuilderImpl(JdbcUtils.MYSQL);
				result.rollbackSql = updateBuilder.getSQLUpdateStatement();
				result.sqlType = SQLType.UPDATE;
			} else if (statement instanceof MySqlInsertStatement) {// insert
				deleteBuilder = new SQLDeleteBuilderImpl(JdbcUtils.MYSQL);
				result.rollbackSql = deleteBuilder.getSQLDeleteStatement();
				result.sqlType = SQLType.INSERT;
			} else if(statement instanceof SQLDeleteStatement ){// delete
				insertStatementBuilder = new SqlInsertStatementBuilderImpl(JdbcUtils.MYSQL);
				result.rollbackSql = insertStatementBuilder.getSQLInsertStatement();
				result.sqlType = SQLType.DELETE;
			}
			pipeline = new SQLParamExtractorPipeline();
			statement.accept(new MySQLRewriteVistorAop(new TxcSQLASTVisitorAdivce()));
			result.pipeline = pipeline;
			//如果queryBuilder中没有需要查询的字段，则设为空
			result.querySql = queryBuilder.getSQLSelectStatement();
			result.tableName = tableName;
			result.where = null;//FIXME
			logger.debug("原sql:{} 解析出来的sql:{}",SQLUtils.toMySqlString(statement),SQLUtils.toMySqlString(result.rollbackSql));
			return result;
		} finally {
			context.stop();
		}
	}

	class TxcSQLASTVisitorAdivce extends SQLASTVisitorAspectAdapter {
		
		int index = 0;//下标重排
		TableSchema schema;
		
		SQLBinaryOpExpr newWhere4Update;
		Set<String> alreadyDealPrimaryKeyStrs;
		
		/* 
		 * 解析table名
		 */
		@Override
		public SQLExprTableSource tableAspect(SQLExprTableSource table) {
			SQLIdentifierExpr tableName = (SQLIdentifierExpr) table.getExpr();
			String tablename = tableName.getName().toLowerCase();
			queryBuilder.from(tablename,table.getAlias());
			if(updateBuilder != null) {
				updateBuilder.from(tablename, table.getAlias());
			}
			if(deleteBuilder != null) {
				deleteBuilder.from(tablename,table.getAlias());
			}
			if(insertStatementBuilder != null) {
				insertStatementBuilder.insert(tablename);
			}
			TxcSqlParserProcessor_delete.this.tableName = tablename;
			TableSchema schema = LRUCache.getTableSchema(tablename,new TableSchemaCacheLoader(jdbcTemplate, tablename));
			this.schema = schema;
			return table;
		}
		
		@Override
		public void deleteEnterPoint(SQLDeleteStatement deleteStatement) {
			List<Field> columns = schema.getFields();
			String[] cs = new String[columns.size()];
			for(int i = 0;i < columns.size();i++) {
				try {
					final int idex = i;
					final String cname = columns.get(i).getName().toLowerCase();
					cs[i] = cname;
					pipeline.addExtractor(new SQLParamExtractorPipeline.UpdateSetItemExtractor(pipeline) {
						
						@Override
						public void extract() {
							Object value = this.getQueryColumn(cname);
							this.addFinalArg(idex,value);
						}
						
						@Override
						public String desc() {
							return String.format("【DELETE->INSERT】从原数据中抽取列【%s】的值", cname);
						}
					});
				} catch (SQLException e) {
					e.printStackTrace();
				}
				index++;//让where条件下标后移
			}
			insertStatementBuilder.column(cs);
			SQLSelectQueryBlock query =  (SQLSelectQueryBlock) queryBuilder.getSQLSelectStatement().getSelect().getQuery();
			SQLSelectItem selectItem = new SQLSelectItem(new SQLAllColumnExpr());
			query.addSelectItem(selectItem);
			
		}
		
		/* 
		 * insert语句解析成delete,抽取主键值
		 */
		@Override
		public void insertEnterPoint(SQLInsertStatement insertStatement) {
			List<SQLExpr> columns = insertStatement.getColumns();
			int i = 0;
			SQLExpr where = null;
			for(SQLExpr column : columns) {
				SQLName _column = (SQLName) column;
				String _columnName = _column.getSimpleName().toLowerCase();
				queryBuilder.select(_columnName);
				if(schema.getPrimaryKeyStrs().contains(_columnName)) {
					ValuesClause values = insertStatement.getValues();
					List<SQLExpr> _values = values.getValues();
					SQLVariantRefExpr right = new SQLVariantRefExpr("?");
					right.setIndex(index);
					final int tmpIndex = index;
					index++;
					if(_values.get(i) instanceof SQLVariantRefExpr) {
						SQLVariantRefExpr primaryKeyVariantRef = (SQLVariantRefExpr) _values.get(i);
						int _index = primaryKeyVariantRef.getIndex();
						pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
							
							@Override
							public void extract() {
								Object[] args = (Object[]) context.getParam(SQLParamExtractorPipeline.OUTTER_ARGS);
								Object value = args[_index];
								this.addFinalArg(tmpIndex, value);
//								this.addWhereArg(value);
							}
							
							@Override
							public String desc() {
								return String.format("【INSERT->DELETE】从原始参数中提取主键值作为delete条件,下标为%d", _index);
							}
						});
					} else if(_values.get(i) instanceof SQLLiteralExpr) {
						final String primaryKeyValue = _values.get(i).toString();
						pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
							
							@Override
							public void extract() {
								this.addFinalArg(tmpIndex, primaryKeyValue);
//								this.addWhereArg(value);
							}
							
							@Override
							public String desc() {
								return String.format("【INSERT->DELETE】从原始SQL中提取主键值:%s作为条件", primaryKeyValue);
							}
						});
					} else {
						throw new TxcSqlParseException("insert statement中包含不支持的参数类型，目前仅支持占位符和一般的SqlLiteralExpr参数类型");
					}
					if(where != null) {
						SQLExpr andRight = new SQLBinaryOpExpr(new SQLIdentifierExpr(_columnName), SQLBinaryOperator.Equality, right);
						where = new SQLBinaryOpExpr(where, SQLBinaryOperator.BooleanAnd, andRight);
					}else {
						where = new SQLBinaryOpExpr(new SQLIdentifierExpr(_columnName), SQLBinaryOperator.Equality, right);
					}
				}
				i++;
			}
			if(where == null) {//如果insert字段里不包含主键字段，则报错，不支持sql回滚
				throw new TxcSqlParseException("insert statement中没有包含主键！");
			}else {
				deleteBuilder.getSQLDeleteStatement().setWhere(where);
				SQLSelectQueryBlock query = (SQLSelectQueryBlock) queryBuilder.getSQLSelectStatement().getSelect().getQuery();
				query.setWhere(where);
			}
		}
		
		private void dealUpdateItem(String columnName,boolean isCustomField) {
			if(!isCustomField) {
				//主键字段放在whereEnterPoint中去处理,这里增加非主键字段
				if(!schema.getPrimaryKeyStrs().contains(columnName)) {
					queryBuilder.select(columnName);
				}
			}
		}
		
		/* 
		 * update set部分
		 */
		@Override
		public SQLUpdateSetItem updateItemAspect(SQLUpdateSetItem updateItem) {
			
			SQLUpdateSetItem newItem = new SQLUpdateSetItem();
			newItem.setColumn(updateItem.getColumn());
			
			SQLName column = (SQLName) updateItem.getColumn();
			final String columnName = column.getSimpleName().toLowerCase();
			TxcCustomSettingService settingService = ContextUtils.getBean("txcCustomSettingService",TxcCustomSettingService.class);
			boolean isCustomField = settingService.customField(tableName, columnName, null);
			
			SQLExpr value = updateItem.getValue();
			
			/*主键更新	特殊处理--------------------------------------------------------------------------------------------start*/
			if(schema.getPrimaryKeyStrs().contains(columnName)) {
				if(alreadyDealPrimaryKeyStrs == null) {
					alreadyDealPrimaryKeyStrs = new HashSet<>();
				}
				alreadyDealPrimaryKeyStrs.add(columnName);
				//更新字段中包含主键,需要在回滚语句中的where条件中取更新参数而不是取原数据
				SQLVariantRefExpr right = new SQLVariantRefExpr("?");
				right.setIndex(index);
				final int tmpIndex = index;
				index++;
				if(value instanceof SQLVariantRefExpr) {//case1: 	column1 = ?
					int oldIndex = ((SQLVariantRefExpr) value).getIndex();
					pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
						@Override
						public void extract() {
							Object[] args = (Object[]) context.getParam(SQLParamExtractorPipeline.OUTTER_ARGS);
							Object value = args[oldIndex];
							this.addFinalArg(tmpIndex,value);
						}
						
						@Override
						public String desc() {
							return String.format("【WHERE】update语句存在主键更新，从原参数数组中获取下标【%d】的值作为回滚条件", oldIndex);
						}
					});
				}else if(value instanceof SQLLiteralExpr) {//case2:		column1 = 1;
					pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
						@Override
						public void extract() {
							this.addFinalArg(tmpIndex,value.toString());
						}
						
						@Override
						public String desc() {
							return String.format("【WHERE】update语句存在主键更新，从原sql语句中获取值%s作为回滚条件,并放入下标【%d】", value.toString(),tmpIndex);
						}
					});
				}else if(value instanceof SQLMethodInvokeExpr) {//case3: 	column1 = now();
					throw new TxcNotSupportException("txc暂不支持的sql语法");
				}else if(value instanceof SQLBinaryOpExpr) {//case4: 	column1 = column1 + 1; column1 = column1 + ?
					SQLName left = (SQLName) ((SQLBinaryOpExpr) value).getLeft();
					SQLBinaryOperator operator = ((SQLBinaryOpExpr) value).getOperator();
					SQLExpr _right = ((SQLBinaryOpExpr) value).getRight();
					if(!( _right instanceof SQLVariantRefExpr) && ! (_right instanceof SQLLiteralExpr)) {//column = now()
						throw new TxcNotSupportException("txc暂不支持的sql语法");
					}
					String leftField = left.getSimpleName();
					final String fieldToExtract;//待抽取的字段
					if(!leftField.toLowerCase().equals(columnName)) {//case4_1: column1 = column2 + xxx
						queryBuilder.select(leftField);//额外查出column2
						fieldToExtract = leftField;
					}else {
						fieldToExtract = columnName;
					}
					
					
					pipeline.addExtractor(new SQLParamExtractorPipeline.UpdateSetItemExtractor(pipeline) {
						
						private boolean type = (_right instanceof SQLVariantRefExpr) ? true : false;
						
						@Override
						public void extract() {
							Object operateData = null;
							if(_right instanceof SQLVariantRefExpr) {//column1 = column1 + ?
								//从原参数中抽取操作数
								int oldIndex = ((SQLVariantRefExpr) _right).getIndex();
								Object[] args = (Object[]) context.getParam(SQLParamExtractorPipeline.OUTTER_ARGS);
								operateData = args[oldIndex];
							}else if(_right instanceof SQLLiteralExpr){//column1 = column1 + 1
								//从原语句中获取操作数
								operateData = ((SQLLiteralExpr) _right).toString();
							}else {
								throw new TxcNotSupportException("不支持的sql语法");
							}
							Object value = this.getQueryColumn(fieldToExtract);
							Object result = AviatorEvaluator.execute(value+operator.getName()+operateData);
							this.addFinalArg(tmpIndex,result);
						}
						
						@Override
						public String desc() {
							return String.format("【WHERE】update语句存在主键更新,从原数据中获取列【%s】的值 作为左操作数，运算符为【%s】,%s", fieldToExtract,
									operator.getName(),type ? String.format("从原参数中获取下标为【%d】的参数做为右操作数", ((SQLVariantRefExpr) _right).getIndex()) : 
										String.format("从原sql语句中获取【%s】做为右操作数", ((SQLLiteralExpr) _right).toString()));
						}
					});
				}
				
				if(newWhere4Update == null) {
					newWhere4Update = new SQLBinaryOpExpr(new SQLIdentifierExpr(columnName), SQLBinaryOperator.Equality, right);
				}else {
					newWhere4Update = new SQLBinaryOpExpr(newWhere4Update, SQLBinaryOperator.BooleanAnd, 
							new SQLBinaryOpExpr(new SQLIdentifierExpr(columnName), SQLBinaryOperator.Equality, right));
				}
			}
			/*主键更新	特殊处理--------------------------------------------------------------------------------------------end*/
			
			SQLExpr newValue = null;
			if(!isCustomField) {
				if(value instanceof SQLVariantRefExpr || value instanceof SQLLiteralExpr || value instanceof SQLMethodInvokeExpr) {//column1 = ?; column1 = 1; column1 = now()
					SQLVariantRefExpr tmp = new SQLVariantRefExpr();
					tmp.setName("?");
					tmp.setParent(newItem);
					tmp.setIndex(index);
					final int tmpIndex = index;
					pipeline.addExtractor(new SQLParamExtractorPipeline.UpdateSetItemExtractor(pipeline) {
						@Override
						public void extract() {
							Object value = this.getQueryColumn(columnName);
							this.addFinalArg(tmpIndex,value);
						}
						
						@Override
						public String desc() {
							return String.format("【UPDATE】从原数据中获取列【%s】的值", columnName);
						}
					});
					dealUpdateItem(columnName, isCustomField);
					index ++;
					newValue = tmp;
				}else if(value instanceof SQLBinaryOpExpr) {
					//column1 = column1 + 1;column1 = column2 + 1;column1 = column1 + column2;t.column1 = t.column1 + 1;
					SQLBinaryOpExpr op = (SQLBinaryOpExpr) value;
					if((op.getLeft() instanceof SQLName && ((SQLName) op.getLeft()).getSimpleName().equals(columnName))
							&& 
						(op.getRight() instanceof SQLNumericLiteralExpr || op.getRight() instanceof SQLVariantRefExpr)
							&&
						(op.getOperator() == SQLBinaryOperator.Add || op.getOperator() == SQLBinaryOperator.Subtract)
							) {
						SQLBinaryOpExpr newOp = new SQLBinaryOpExpr();
						newOp.setLeft(op.getLeft());//left 延用
						SQLBinaryOperator operator = op.getOperator();//op	如果是+、-操作则取反
						if(operator == SQLBinaryOperator.Add) {
							newOp.setOperator(SQLBinaryOperator.Subtract);
						}else if(operator == SQLBinaryOperator.Subtract) {
							newOp.setOperator(SQLBinaryOperator.Add);
						}
						if(op.getRight() instanceof SQLVariantRefExpr) {
							SQLVariantRefExpr _v = new SQLVariantRefExpr();
							_v.setName("?");
							_v.setParent(newOp);
							_v.setIndex(index);
							//right	包含占位符
							final int tmpIndex = index;
							pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
								@Override
								public void extract() {
									Object[] args = (Object[]) context.getParam(SQLParamExtractorPipeline.OUTTER_ARGS);
									Object value = args[((SQLVariantRefExpr)op.getRight()).getIndex()];
									this.addFinalArg(tmpIndex,value);
								}
								
								@Override
								public String desc() {
									return String.format("【UPDATE】从原参数数组中获取下标【%d】的值", ((SQLVariantRefExpr)op.getRight()).getIndex());
								}
							});
							index ++;
							newOp.setRight(_v);
						}else {
							newOp.setRight(op.getRight());//right	直接取值
						}
						newValue = newOp;
					}else {
						SQLVariantRefExpr tmp = new SQLVariantRefExpr();
						tmp.setName("?");
						tmp.setParent(newItem);
						tmp.setIndex(index);
						final int tmpIndex = index;
						pipeline.addExtractor(new SQLParamExtractorPipeline.UpdateSetItemExtractor(pipeline) {
							@Override
							public void extract() {
								Object value = this.getQueryColumn(columnName);
								this.addFinalArg(tmpIndex,value);
							}
							
							@Override
							public String desc() {
								return String.format("【UPDATE】从原数据中获取列【%s】的值", columnName);
							}
						});
						dealUpdateItem(columnName, isCustomField);
						index ++;
						newValue = tmp;
					}
				}
			}else {
				//如果是业务定义特殊字段
				//1.字段类型是时间类型
				Integer type = schema.getMysqlType(columnName);
				if(type != null) {
					if(type == java.sql.Types.DATE || type == java.sql.Types.TIME || type == java.sql.Types.TIMESTAMP) {
						if(value instanceof SQLMethodInvokeExpr) {
							newValue = value;//now(),sysdate()
						}
					}
				}
			}
			if(newValue != null) {
				newItem.setValue(newValue);
				updateBuilder.getSQLUpdateStatement().addItem(newItem);
			}
			return updateItem;
		}
		
		/* 
		 * 对where中的占位符重排下标
		 */
		@Override
		public void whereBinaryOpAspect(SQLVariantRefExpr right) {
			final int oldIndex = right.getIndex();
			right.setIndex(index);
			final int tmpIndex = index;
			pipeline.addExtractor(new SQLParamExtractorPipeline.OriginalParamExtractor(pipeline) {
				@Override
				public void extract() {
					Object[] args = (Object[]) context.getParam(SQLParamExtractorPipeline.OUTTER_ARGS);
					Object value = args[oldIndex];
					this.addFinalArg(tmpIndex,value);//delete生成insert回滚时不需要where条件
				}
				
				@Override
				public String desc() {
					return String.format("【QUERY-WHERE】从原参数数组中获取下标【%d】的值", oldIndex);
				}
			});
			index++;
		}
		
		@Override
		public void whereExitPoint(SQLBinaryOpExpr x) {
			
		}

		/* 
		 * where解析比较复杂，延用原sql中的where结构
		 */
		@Override
		public void whereEnterPoint(SQLBinaryOpExpr x) {
			//查询语句延用老的where条件，不破坏原条件
			SQLSelectQueryBlock query =  (SQLSelectQueryBlock) queryBuilder.getSQLSelectStatement().getSelect().getQuery();
			query.setWhere(x);
			
			//回滚语句统一用主键代替原条件,并且只有update操作才会走到此处，insert语句没有where,delete语句有where但回滚语句中用不到
			if(updateBuilder != null) {
				for(String primaryKey : schema.getPrimaryKeyStrs()) {
					queryBuilder.select(primaryKey);
					if(alreadyDealPrimaryKeyStrs!= null && alreadyDealPrimaryKeyStrs.contains(primaryKey)) {//已经在updateItemAspect中处理过的主键不再处理
						continue;
					}
					SQLVariantRefExpr right = new SQLVariantRefExpr("?");
					right.setIndex(index);
					final int tmpIndex = index;
					pipeline.addExtractor(new SQLParamExtractorPipeline.UpdateSetItemExtractor(pipeline) {
						@Override
						public void extract() {
							Object value = this.getQueryColumn(primaryKey);
							this.addFinalArg(tmpIndex,value);
						}
						@Override
						public String desc() {
							return String.format("【UPDATE】从原数据中获取列【%s】的值作为回滚语句中的主键条件", primaryKey);
						}
					});
					index++;
					if(newWhere4Update == null) {
						newWhere4Update = new SQLBinaryOpExpr(new SQLIdentifierExpr(primaryKey),SQLBinaryOperator.Equality,right);
					}else {
						newWhere4Update = new SQLBinaryOpExpr(newWhere4Update,SQLBinaryOperator.BooleanAnd,
								new SQLBinaryOpExpr(new SQLIdentifierExpr(primaryKey),SQLBinaryOperator.Equality,right));
					}
				}
				updateBuilder.getSQLUpdateStatement().setWhere(newWhere4Update);
			}
		}
	}
}
